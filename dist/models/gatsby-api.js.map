{"version":3,"sources":["../../src/models/gatsby-api.ts"],"names":["previewOptimizationPreset","presetName","useIf","inPreviewMode","options","html","useGatsbyImage","createStaticFiles","type","usingGatsbyV4OrGreater","__all","limit","Comment","Menu","MenuItem","User","defaultPluginOptions","url","verbose","debug","throwRefetchErrors","graphql","showQueryOnError","showQueryVarsOnError","copyQueryOnError","panicOnError","onlyReportCriticalErrors","copyNodeSourcingQueryAndExit","writeQueriesToDisk","copyHtmlResponseOnError","printIntrospectionDiff","timeBuildSteps","disableCompatibilityCheck","preview","develop","nodeUpdateInterval","hardCacheMediaFiles","hardCacheData","production","allow404Images","auth","htaccess","username","password","schema","queryDepth","circularQueryLimit","typePrefix","timeout","perPage","requestConcurrency","previewRequestConcurrency","excludeFieldNames","imageMaxWidth","fallbackImageMaxWidth","imageQuality","presets","RootQuery","UserToMediaItemConnection","exclude","WpContentNodeToEditLockConnectionEdge","WPPageInfo","ActionMonitorAction","UserToActionMonitorActionConnection","Plugin","Theme","MediaItem","lazyNodes","createFileNodes","localFile","excludeByMimeTypes","maxFileSizeBytes","beforeChangeNode","remoteNode","actionType","typeSettings","createdMediaItem","mediaItemNode","parentName","id","ContentNode","nodeInterface","TermNode","menuBeforeChangeNode","EnqueuedScript","EnqueuedStylesheet","EnqueuedAsset","ContentNodeToEnqueuedScriptConnection","ContentNodeToEnqueuedStylesheetConnection","TermNodeToEnqueuedScriptConnection","TermNodeToEnqueuedStylesheetConnection","UserToEnqueuedScriptConnection","UserToEnqueuedStylesheetConnection","gatsbyApi","state","helpers","pluginOptions","reducers","setState","payload","stateCopy","defaultPresets","userPresets","optionsPresets","filter","preset","length","activePluginOptionsPresets","presetModifiedOptions"],"mappings":"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","sourcesContent":["import { GatsbyNodeApiHelpers } from \"~/utils/gatsby-types\"\nimport merge from \"lodash/merge\"\nimport { createLocalFileNode } from \"~/steps/source-nodes/create-nodes/create-local-file-node\"\nimport { menuBeforeChangeNode } from \"~/steps/source-nodes/before-change-node/menu\"\nimport { cloneDeep } from \"lodash\"\nimport { inPreviewMode } from \"~/steps/preview\"\nimport { usingGatsbyV4OrGreater } from \"~/utils/gatsby-version\"\n\nexport interface IPluginOptionsPreset {\n  presetName: string\n  useIf: (\n    helpers: GatsbyNodeApiHelpers,\n    pluginOptions: IPluginOptions\n  ) => boolean\n  options: IPluginOptions\n}\n\nexport const previewOptimizationPreset: IPluginOptionsPreset = {\n  presetName: `PREVIEW_OPTIMIZATION`,\n  useIf: inPreviewMode,\n  options: {\n    html: {\n      useGatsbyImage: false,\n      createStaticFiles: false,\n    },\n\n    type:\n      // in Gatsby v4+ we can't fetch nodes in resolvers.\n      // This means if we apply the following settings in v4+\n      // the site will have a lot of missing data when connection\n      // fields reference node's which werent fetched due to the limit option.\n      // so only apply the following settings before Gatsby v4\n      !usingGatsbyV4OrGreater\n        ? {\n            __all: {\n              limit: 50,\n            },\n            Comment: {\n              limit: 0,\n            },\n            Menu: {\n              limit: null,\n            },\n            MenuItem: {\n              limit: null,\n            },\n            User: {\n              limit: null,\n            },\n          }\n        : {},\n  },\n}\nexport interface IPluginOptions {\n  url?: string\n  verbose?: boolean\n  debug?: {\n    throwRefetchErrors?: boolean\n    graphql?: {\n      showQueryOnError?: boolean\n      showQueryVarsOnError?: boolean\n      copyQueryOnError?: boolean\n      panicOnError?: boolean\n      onlyReportCriticalErrors?: boolean\n      copyNodeSourcingQueryAndExit?: boolean\n      writeQueriesToDisk?: boolean\n      copyHtmlResponseOnError?: boolean\n      printIntrospectionDiff?: boolean\n    }\n    timeBuildSteps?: Array<string> | boolean\n    disableCompatibilityCheck?: boolean\n    preview?: boolean\n  }\n  develop?: {\n    nodeUpdateInterval?: number\n    hardCacheMediaFiles?: boolean\n    hardCacheData?: boolean\n  }\n  production?: {\n    hardCacheMediaFiles?: boolean\n    allow404Images?: boolean\n  }\n  auth?: {\n    htaccess: {\n      username: string | null\n      password: string | null\n    }\n  }\n  schema?: {\n    queryDepth: number\n    circularQueryLimit: number\n    typePrefix: string\n    timeout: number // 30 seconds\n    perPage: number\n    requestConcurrency?: number\n    previewRequestConcurrency?: number\n  }\n  excludeFieldNames?: []\n  html?: {\n    useGatsbyImage?: boolean\n    imageMaxWidth?: number\n    fallbackImageMaxWidth?: number\n    imageQuality?: number\n    createStaticFiles?: boolean\n  }\n  presets?: Array<IPluginOptionsPreset>\n  type?: {\n    [typename: string]: {\n      limit?: number\n      excludeFieldNames?: Array<string>\n\n      exclude?: boolean\n      // @todo type this\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      beforeChangeNode?: (any) => Promise<any>\n      nodeInterface?: boolean\n      lazyNodes?: boolean\n      createFileNodes?: boolean\n      localFile?: {\n        excludeByMimeTypes?: Array<string>\n        maxFileSizeBytes?: number\n        requestConcurrency?: number\n      }\n    }\n  }\n}\n\nconst defaultPluginOptions: IPluginOptions = {\n  url: null,\n  verbose: true,\n  debug: {\n    throwRefetchErrors: false,\n    graphql: {\n      showQueryOnError: false,\n      showQueryVarsOnError: false,\n      copyQueryOnError: false,\n      panicOnError: false,\n      onlyReportCriticalErrors: true,\n      copyNodeSourcingQueryAndExit: false,\n      writeQueriesToDisk: false,\n      copyHtmlResponseOnError: false,\n      printIntrospectionDiff: false,\n    },\n    timeBuildSteps: false,\n    disableCompatibilityCheck: false,\n    preview: false,\n  },\n  develop: {\n    nodeUpdateInterval: 5000,\n    hardCacheMediaFiles: false,\n    hardCacheData: false,\n  },\n  production: {\n    hardCacheMediaFiles: false,\n    allow404Images: false,\n  },\n  auth: {\n    htaccess: {\n      username: null,\n      password: null,\n    },\n  },\n  schema: {\n    queryDepth: 15,\n    circularQueryLimit: 5,\n    typePrefix: `Wp`,\n    timeout: 30 * 1000, // 30 seconds\n    perPage: 100,\n    requestConcurrency: 15,\n    previewRequestConcurrency: 5,\n  },\n  excludeFieldNames: [],\n  html: {\n    // this causes the source plugin to find/replace images in html\n    useGatsbyImage: true,\n    // this adds a limit to the max width an image can be\n    // if the image selected in WP is smaller, or the image is smaller than this\n    // those values will be used instead.\n    imageMaxWidth: null,\n    // if a max width can't be inferred from html, this value will be passed to Sharp\n    // if the image is smaller than this, the images width will be used instead\n    fallbackImageMaxWidth: 1024,\n    imageQuality: 90,\n    //\n    // Transforms anchor links, video src's, and audio src's (that point to wp-content files) into local file static links\n    // Also fetches those files if they don't already exist\n    createStaticFiles: true,\n  },\n  presets: [previewOptimizationPreset],\n  type: {\n    __all: {\n      // @todo make dateFields into a plugin option?? It's not currently\n      // this may not be needed since WPGraphQL will be getting a Date type soon\n      // dateFields: [`date`],\n    },\n    RootQuery: {\n      excludeFieldNames: [`viewer`, `node`, `schemaMd5`],\n    },\n    UserToMediaItemConnection: {\n      // if this type is not excluded it will potentially fetch an extra 100\n      // media items per user during node sourcing\n      exclude: true,\n    },\n    WpContentNodeToEditLockConnectionEdge: {\n      exclude: true,\n    },\n    WPPageInfo: {\n      exclude: true,\n    },\n    ActionMonitorAction: {\n      exclude: true,\n    },\n    UserToActionMonitorActionConnection: {\n      exclude: true,\n    },\n    Plugin: {\n      exclude: true,\n    },\n    Theme: {\n      exclude: true,\n    },\n    MediaItem: {\n      lazyNodes: false,\n      createFileNodes: true,\n      localFile: {\n        excludeByMimeTypes: [],\n        maxFileSizeBytes: 15728640, // 15Mb\n        requestConcurrency: 100,\n      },\n      beforeChangeNode: async ({\n        remoteNode,\n        actionType,\n        typeSettings,\n        // @todo type this\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      }): Promise<any> => {\n        if (\n          // we fetch lazy nodes files in resolvers, no need to fetch them here.\n          typeSettings.lazyNodes ||\n          // or if the user doesn't want us to create file nodes, don't do anything.\n          !typeSettings.createFileNodes\n        ) {\n          return {\n            remoteNode,\n          }\n        }\n\n        if (\n          actionType === `CREATE_ALL` ||\n          actionType === `CREATE` ||\n          actionType === `UPDATE`\n        ) {\n          const createdMediaItem = await createLocalFileNode({\n            mediaItemNode: remoteNode,\n            parentName: `Node action ${actionType}`,\n          })\n\n          if (createdMediaItem) {\n            remoteNode.localFile = {\n              id: createdMediaItem.id,\n            }\n\n            return {\n              remoteNode,\n            }\n          }\n        }\n\n        return {\n          remoteNode,\n        }\n      },\n    },\n    ContentNode: {\n      nodeInterface: true,\n    },\n    TermNode: {\n      nodeInterface: true,\n    },\n    Menu: {\n      /**\n       * This is used to fetch child menu items\n       * on Menus as it's problematic to fetch them otherwise\n       * in WPGQL currently\n       *\n       * So after a Menu Node is fetched and processed, this function runs\n       * It loops through the child menu items, generates a query for them,\n       * fetches them, and creates nodes out of them.\n       *\n       * This runs when initially fetching all nodes, and after an incremental\n       * fetch happens\n       *\n       * When we can get a list of all menu items regardless of location in WPGQL, this can be removed.\n       */\n      beforeChangeNode: menuBeforeChangeNode,\n    },\n    // the next two types can't be sourced in Gatsby properly yet\n    // @todo instead of excluding these manually, auto exclude them\n    // based on how they behave (no single node query available)\n    EnqueuedScript: {\n      exclude: true,\n    },\n    EnqueuedStylesheet: {\n      exclude: true,\n    },\n    EnqueuedAsset: {\n      exclude: true,\n    },\n    ContentNodeToEnqueuedScriptConnection: {\n      exclude: true,\n    },\n    ContentNodeToEnqueuedStylesheetConnection: {\n      exclude: true,\n    },\n    TermNodeToEnqueuedScriptConnection: {\n      exclude: true,\n    },\n    TermNodeToEnqueuedStylesheetConnection: {\n      exclude: true,\n    },\n    UserToEnqueuedScriptConnection: {\n      exclude: true,\n    },\n    UserToEnqueuedStylesheetConnection: {\n      exclude: true,\n    },\n  },\n}\n\nexport interface IGatsbyApiState {\n  helpers: GatsbyNodeApiHelpers\n  pluginOptions: IPluginOptions\n  activePluginOptionsPresets?: Array<IPluginOptionsPreset>\n}\n\nconst gatsbyApi = {\n  state: {\n    helpers: {},\n    pluginOptions: defaultPluginOptions,\n  } as IGatsbyApiState,\n\n  reducers: {\n    setState(\n      state: IGatsbyApiState,\n      payload: IGatsbyApiState\n    ): IGatsbyApiState {\n      const stateCopy = cloneDeep(state)\n\n      const defaultPresets = stateCopy.pluginOptions?.presets || []\n      const userPresets = payload.pluginOptions?.presets || []\n\n      /**\n       * Presets are plugin option configurations that are conditionally\n       * applied based on a `useIf` function (which returns a boolean)\n       * If it returns true, that preset is used.\n       */\n      const optionsPresets = [...defaultPresets, ...userPresets]?.filter(\n        preset => preset.useIf(payload.helpers, payload.pluginOptions)\n      )\n\n      if (optionsPresets?.length) {\n        state.activePluginOptionsPresets = optionsPresets\n\n        let presetModifiedOptions = state.pluginOptions\n\n        for (const preset of optionsPresets) {\n          presetModifiedOptions = merge(presetModifiedOptions, preset.options)\n        }\n\n        state.pluginOptions = presetModifiedOptions\n      }\n\n      // add the user defined plugin options last so they override any presets\n      state = merge(state, payload)\n\n      return state\n    },\n  },\n}\n\nexport default gatsbyApi\n"],"file":"gatsby-api.js"}